- title: GetTransport.com

  link: https://gettransport.com/

  begin_date: August 2017
  end_date: March 2020

  position: CIO + Software Architect + Lead Website Developer
  team: 2â€“5 developers, including remote

  description: |
    Cargo transportation aggregator, between shippers and carriers.
    Another project written via <%= external_link 'Flame', 'https://github.com/AlexWayfer/flame' %>.

    I've tried to make this project taking into account my architecture errors of GetTransfer.
    So, it's using a next version of Flame, 5, with a lot of improvements.
    Also we have started to use service objects instead of fat controllers and models.
    Then I service objects turned into <%= external_link 'Formalism', 'https://github.com/AlexWayfer/formalism' %> forms.

    This project was pretty similar to GetTransfer, so I was working with similar technologies,
    sometimes with a better or cleaner approach.

  technologies:
    Back-end:
      - Ruby
      - Flame
      - PostgreSQL
      - Sequel
      - Formalism
      - ERB
      - Money gem
    Front-end:
      - JavaScript
      - SCSS
      - IcoMoon
    Integrations:
      - Google Maps API
      - GeoNames API
      - PayPal API
      - Platron API
    Localization:
      - Crowdin
    Error tracking:
      - Sentry
    Code management:
      - GitLab
    Hosting:
      - Hetzner
    Task management:
      - Basecamp


- title: GetTransfer.com

  link: https://gettransfer.com/

  begin_date: September 2015
  end_date: August 2017

  position: CIO + Software Architect + Lead Website Developer
  team: 2â€“10 developers, including remote

  description: |
    People transfers aggregator, between passengers and carriers.
    It's pretty popular and successful.

    The first project written via <%= external_link 'Flame', 'https://github.com/AlexWayfer/flame' %>.

    There was a lot of work with:

    *   SCSS architecture;

    *   JavaScript plugins and custom code;

    *   database architecture and optimizations;

    *   form data validations;

    *   client-side and server-side tight integration with Google Maps API;

    *   integrations with a lot of payment systems, like PayPal or Platron;

    *   translations via Crowdin and Gengo;

    *   currencies exhanges;

    *   timezones and time convertations;

    *   comfortable dashboards for different types of users, from managers to client;

    *   aggregated data exports in different formats;

    *   forecasts algorythms for prices.

    In all time of working on this project I was leading a team of up to 10 people,
    they all were different and many of them were cool.
    I've got a lot of experience in leading and talking with people,
    especially reviewing their code. ðŸ˜¬ Now I'm more calm and respectful.

    Honestly, I don't like what project became after my leave.

  technologies:
    Back-end:
      - Ruby
      - Flame
      - PostgreSQL
      - Sequel
      - ERB
      - Money gem
    Front-end:
      - JavaScript
      - SCSS
      - Fontello
    Integrations:
      - Google Maps API
      - GeoNames API
      - PayPal API
      - Platron API
    Localization:
      - Crowdin
    Error tracking:
      - Sentry
    Code management:
      - GitLab
    Hosting:
      - AWS
      - DigitalOcean
      - Scaleway
    Task management:
      - Basecamp


- title: GetWiFi

  begin_date: April 2015
  end_date: November 2015

  position: CIO + Software Architect + Lead Website Developer
  team: 2â€“4 developers

  description: |
    Dashboard for Wi-Fi captive portals among cafes, hotels, etc.

    At that time I knew PHP at high level and saw its disadvantages for me.
    So, I wanted to learn any new programming language with more consistency
    and better potential for project files structure.
    Finally I was choosing between Python and Ruby,
    and I like (more consistent) OOP approach of Ruby, `snake_case` and its philosophy.

    This project was a first serious try to make it with Ruby.
    I didn't like Ruby on Rails, mostly because of its approaches and "magic",
    so I've developed this project via <%= external_link 'Sinatra', 'http://sinatrarb.com/' %>,
    but was a big mistake because of controllers architecture and it became the impulse to create
    <%= external_link 'Flame framework', 'https://github.com/AlexWayfer/flame' %>.

    Although there was nice (in my opinion) horizontal-nested simple UI,
    and pretty good database architecture.

  technologies:
    General:
      - MikroTik firmware and configs
      - Wi-Fi Captive Portal
    Back-end:
      - Ruby
      - Sinatra
      - MySQL
      - DataMapper (abandoned ORM)
    Front-end:
      - JavaScript
    Code management:
      - BitBucket
    Task management:
      - Basecamp


- title: KEY Group

  link: https://web.archive.org/web/20150801125104/http://key-g.com/

  begin_date: April 2014
  end_date: March 2015

  position: Lead Website Developer
  team: 2â€“3 developers and outsource

  description: |
    It was a weird experience of making the layout with diagonal sections. Adaptive!
    I've made it via CSS `transform` finally, although there were many different tries
    with other approaches. Also it was my practice of making SVG icons via font characters.
    I've learned a lot of CSS with this project.

  technologies:
    Back-end:
      - PHP
      - MySQL
    Front-end:
      - CSS
      - JavaScript
      - Fontello
    Code management:
      - BitBucket
    Task management:
      - Basecamp


- title: Icons of the World

  begin_date: March 2014
  end_date: January 2015

  position: Lead Website Developer
  team: 2â€“4 developers

  description: |
    Presentation site of the same named books. Home page contained almost full-screen Google Maps
    with custom markers, pop-ups and clusters.
    It was hard to make custom optimizations of requests to database bypassing WordPress engine.

  technologies:
    Back-end:
      - PHP
      - WordPress
      - MySQL
    Front-end:
      - CSS
      - JavaScript
    Integrations:
      - Google Maps API
    Task management:
      - Basecamp


- title: RDI

  link: http://www.rdi.ru/

  begin_date: July 2014
  end_date: March 2015

  position: Front-end developer
  team: Single outsource developer

  description: |
    Site of the development company (in Moscow region).
    My only experience of changing layout (HTML, CSS, PNG)
    by just a single JPEG file with target design.

  technologies:
    General:
      - GIMP
    Back-end:
      - PHP
      - 1C-Bitrix
    Task management:
      - Basecamp


- title: BCLeaner

  begin_date: January 2013
  end_date: March 2013

  position: Full-stack developer
  team: Single developer

  description: |
    System for detecting bots among Twitter followers.

    In these times there were many bots in Twitter and popular people cheated followers count.
    But then declaring that you have no bots among your followers
    and you're honest became fashinable. So, there was a request to make an automated tool (service)
    for detecting bots among your followers and ban them
    (it was the force unfollow in this time, as I remember).
    Then you could declare that you're "clean" and "honest" too.

    I was trying to make such system for money. Bots recognition algorythm was pretty good,
    but I have not finalize this project because I was fired up for fail
    in another parallel non-related project in the same company.

  technologies:
    Back-end:
      - PHP
    Integrations:
      - Twitter API
